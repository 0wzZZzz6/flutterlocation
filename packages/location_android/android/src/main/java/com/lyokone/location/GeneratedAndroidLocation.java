// Autogenerated from Pigeon (v3.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.lyokone.location;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class GeneratedAndroidLocation {

  public enum LocationAccuracy {
    powerSave(0),
    low(1),
    balanced(2),
    high(3),
    navigation(4);

    private int index;
    private LocationAccuracy(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LocationData {
    private @NonNull Double latitude;
    public @NonNull Double getLatitude() { return latitude; }
    public void setLatitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"latitude\" is null.");
      }
      this.latitude = setterArg;
    }

    private @NonNull Double longitude;
    public @NonNull Double getLongitude() { return longitude; }
    public void setLongitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"longitude\" is null.");
      }
      this.longitude = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private LocationData() {}
    public static final class Builder {
      private @Nullable Double latitude;
      public @NonNull Builder setLatitude(@NonNull Double setterArg) {
        this.latitude = setterArg;
        return this;
      }
      private @Nullable Double longitude;
      public @NonNull Builder setLongitude(@NonNull Double setterArg) {
        this.longitude = setterArg;
        return this;
      }
      public @NonNull LocationData build() {
        LocationData pigeonReturn = new LocationData();
        pigeonReturn.setLatitude(latitude);
        pigeonReturn.setLongitude(longitude);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("latitude", latitude);
      toMapResult.put("longitude", longitude);
      return toMapResult;
    }
    static @NonNull LocationData fromMap(@NonNull Map<String, Object> map) {
      LocationData pigeonResult = new LocationData();
      Object latitude = map.get("latitude");
      pigeonResult.setLatitude((Double)latitude);
      Object longitude = map.get("longitude");
      pigeonResult.setLongitude((Double)longitude);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LocationSettings {
    private @NonNull Boolean askForPermission;
    public @NonNull Boolean getAskForPermission() { return askForPermission; }
    public void setAskForPermission(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"askForPermission\" is null.");
      }
      this.askForPermission = setterArg;
    }

    private @NonNull String rationaleMessageForPermissionRequest;
    public @NonNull String getRationaleMessageForPermissionRequest() { return rationaleMessageForPermissionRequest; }
    public void setRationaleMessageForPermissionRequest(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"rationaleMessageForPermissionRequest\" is null.");
      }
      this.rationaleMessageForPermissionRequest = setterArg;
    }

    private @NonNull String rationaleMessageForGPSRequest;
    public @NonNull String getRationaleMessageForGPSRequest() { return rationaleMessageForGPSRequest; }
    public void setRationaleMessageForGPSRequest(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"rationaleMessageForGPSRequest\" is null.");
      }
      this.rationaleMessageForGPSRequest = setterArg;
    }

    private @NonNull Boolean useGooglePlayServices;
    public @NonNull Boolean getUseGooglePlayServices() { return useGooglePlayServices; }
    public void setUseGooglePlayServices(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"useGooglePlayServices\" is null.");
      }
      this.useGooglePlayServices = setterArg;
    }

    private @NonNull Boolean askForGooglePlayServices;
    public @NonNull Boolean getAskForGooglePlayServices() { return askForGooglePlayServices; }
    public void setAskForGooglePlayServices(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"askForGooglePlayServices\" is null.");
      }
      this.askForGooglePlayServices = setterArg;
    }

    private @NonNull Boolean askForGPS;
    public @NonNull Boolean getAskForGPS() { return askForGPS; }
    public void setAskForGPS(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"askForGPS\" is null.");
      }
      this.askForGPS = setterArg;
    }

    private @NonNull Boolean fallbackToGPS;
    public @NonNull Boolean getFallbackToGPS() { return fallbackToGPS; }
    public void setFallbackToGPS(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fallbackToGPS\" is null.");
      }
      this.fallbackToGPS = setterArg;
    }

    private @NonNull Boolean ignoreLastKnownPosition;
    public @NonNull Boolean getIgnoreLastKnownPosition() { return ignoreLastKnownPosition; }
    public void setIgnoreLastKnownPosition(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"ignoreLastKnownPosition\" is null.");
      }
      this.ignoreLastKnownPosition = setterArg;
    }

    private @Nullable Double expirationDuration;
    public @Nullable Double getExpirationDuration() { return expirationDuration; }
    public void setExpirationDuration(@Nullable Double setterArg) {
      this.expirationDuration = setterArg;
    }

    private @Nullable Double expirationTime;
    public @Nullable Double getExpirationTime() { return expirationTime; }
    public void setExpirationTime(@Nullable Double setterArg) {
      this.expirationTime = setterArg;
    }

    private @NonNull Double fastestInterval;
    public @NonNull Double getFastestInterval() { return fastestInterval; }
    public void setFastestInterval(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fastestInterval\" is null.");
      }
      this.fastestInterval = setterArg;
    }

    private @NonNull Double interval;
    public @NonNull Double getInterval() { return interval; }
    public void setInterval(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"interval\" is null.");
      }
      this.interval = setterArg;
    }

    private @Nullable Double maxWaitTime;
    public @Nullable Double getMaxWaitTime() { return maxWaitTime; }
    public void setMaxWaitTime(@Nullable Double setterArg) {
      this.maxWaitTime = setterArg;
    }

    private @Nullable Long numUpdates;
    public @Nullable Long getNumUpdates() { return numUpdates; }
    public void setNumUpdates(@Nullable Long setterArg) {
      this.numUpdates = setterArg;
    }

    private @NonNull LocationAccuracy accuracy;
    public @NonNull LocationAccuracy getAccuracy() { return accuracy; }
    public void setAccuracy(@NonNull LocationAccuracy setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"accuracy\" is null.");
      }
      this.accuracy = setterArg;
    }

    private @NonNull Double smallestDisplacement;
    public @NonNull Double getSmallestDisplacement() { return smallestDisplacement; }
    public void setSmallestDisplacement(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"smallestDisplacement\" is null.");
      }
      this.smallestDisplacement = setterArg;
    }

    private @NonNull Boolean waitForAccurateLocation;
    public @NonNull Boolean getWaitForAccurateLocation() { return waitForAccurateLocation; }
    public void setWaitForAccurateLocation(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"waitForAccurateLocation\" is null.");
      }
      this.waitForAccurateLocation = setterArg;
    }

    private @Nullable Double acceptableAccuracy;
    public @Nullable Double getAcceptableAccuracy() { return acceptableAccuracy; }
    public void setAcceptableAccuracy(@Nullable Double setterArg) {
      this.acceptableAccuracy = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private LocationSettings() {}
    public static final class Builder {
      private @Nullable Boolean askForPermission;
      public @NonNull Builder setAskForPermission(@NonNull Boolean setterArg) {
        this.askForPermission = setterArg;
        return this;
      }
      private @Nullable String rationaleMessageForPermissionRequest;
      public @NonNull Builder setRationaleMessageForPermissionRequest(@NonNull String setterArg) {
        this.rationaleMessageForPermissionRequest = setterArg;
        return this;
      }
      private @Nullable String rationaleMessageForGPSRequest;
      public @NonNull Builder setRationaleMessageForGPSRequest(@NonNull String setterArg) {
        this.rationaleMessageForGPSRequest = setterArg;
        return this;
      }
      private @Nullable Boolean useGooglePlayServices;
      public @NonNull Builder setUseGooglePlayServices(@NonNull Boolean setterArg) {
        this.useGooglePlayServices = setterArg;
        return this;
      }
      private @Nullable Boolean askForGooglePlayServices;
      public @NonNull Builder setAskForGooglePlayServices(@NonNull Boolean setterArg) {
        this.askForGooglePlayServices = setterArg;
        return this;
      }
      private @Nullable Boolean askForGPS;
      public @NonNull Builder setAskForGPS(@NonNull Boolean setterArg) {
        this.askForGPS = setterArg;
        return this;
      }
      private @Nullable Boolean fallbackToGPS;
      public @NonNull Builder setFallbackToGPS(@NonNull Boolean setterArg) {
        this.fallbackToGPS = setterArg;
        return this;
      }
      private @Nullable Boolean ignoreLastKnownPosition;
      public @NonNull Builder setIgnoreLastKnownPosition(@NonNull Boolean setterArg) {
        this.ignoreLastKnownPosition = setterArg;
        return this;
      }
      private @Nullable Double expirationDuration;
      public @NonNull Builder setExpirationDuration(@Nullable Double setterArg) {
        this.expirationDuration = setterArg;
        return this;
      }
      private @Nullable Double expirationTime;
      public @NonNull Builder setExpirationTime(@Nullable Double setterArg) {
        this.expirationTime = setterArg;
        return this;
      }
      private @Nullable Double fastestInterval;
      public @NonNull Builder setFastestInterval(@NonNull Double setterArg) {
        this.fastestInterval = setterArg;
        return this;
      }
      private @Nullable Double interval;
      public @NonNull Builder setInterval(@NonNull Double setterArg) {
        this.interval = setterArg;
        return this;
      }
      private @Nullable Double maxWaitTime;
      public @NonNull Builder setMaxWaitTime(@Nullable Double setterArg) {
        this.maxWaitTime = setterArg;
        return this;
      }
      private @Nullable Long numUpdates;
      public @NonNull Builder setNumUpdates(@Nullable Long setterArg) {
        this.numUpdates = setterArg;
        return this;
      }
      private @Nullable LocationAccuracy accuracy;
      public @NonNull Builder setAccuracy(@NonNull LocationAccuracy setterArg) {
        this.accuracy = setterArg;
        return this;
      }
      private @Nullable Double smallestDisplacement;
      public @NonNull Builder setSmallestDisplacement(@NonNull Double setterArg) {
        this.smallestDisplacement = setterArg;
        return this;
      }
      private @Nullable Boolean waitForAccurateLocation;
      public @NonNull Builder setWaitForAccurateLocation(@NonNull Boolean setterArg) {
        this.waitForAccurateLocation = setterArg;
        return this;
      }
      private @Nullable Double acceptableAccuracy;
      public @NonNull Builder setAcceptableAccuracy(@Nullable Double setterArg) {
        this.acceptableAccuracy = setterArg;
        return this;
      }
      public @NonNull LocationSettings build() {
        LocationSettings pigeonReturn = new LocationSettings();
        pigeonReturn.setAskForPermission(askForPermission);
        pigeonReturn.setRationaleMessageForPermissionRequest(rationaleMessageForPermissionRequest);
        pigeonReturn.setRationaleMessageForGPSRequest(rationaleMessageForGPSRequest);
        pigeonReturn.setUseGooglePlayServices(useGooglePlayServices);
        pigeonReturn.setAskForGooglePlayServices(askForGooglePlayServices);
        pigeonReturn.setAskForGPS(askForGPS);
        pigeonReturn.setFallbackToGPS(fallbackToGPS);
        pigeonReturn.setIgnoreLastKnownPosition(ignoreLastKnownPosition);
        pigeonReturn.setExpirationDuration(expirationDuration);
        pigeonReturn.setExpirationTime(expirationTime);
        pigeonReturn.setFastestInterval(fastestInterval);
        pigeonReturn.setInterval(interval);
        pigeonReturn.setMaxWaitTime(maxWaitTime);
        pigeonReturn.setNumUpdates(numUpdates);
        pigeonReturn.setAccuracy(accuracy);
        pigeonReturn.setSmallestDisplacement(smallestDisplacement);
        pigeonReturn.setWaitForAccurateLocation(waitForAccurateLocation);
        pigeonReturn.setAcceptableAccuracy(acceptableAccuracy);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("askForPermission", askForPermission);
      toMapResult.put("rationaleMessageForPermissionRequest", rationaleMessageForPermissionRequest);
      toMapResult.put("rationaleMessageForGPSRequest", rationaleMessageForGPSRequest);
      toMapResult.put("useGooglePlayServices", useGooglePlayServices);
      toMapResult.put("askForGooglePlayServices", askForGooglePlayServices);
      toMapResult.put("askForGPS", askForGPS);
      toMapResult.put("fallbackToGPS", fallbackToGPS);
      toMapResult.put("ignoreLastKnownPosition", ignoreLastKnownPosition);
      toMapResult.put("expirationDuration", expirationDuration);
      toMapResult.put("expirationTime", expirationTime);
      toMapResult.put("fastestInterval", fastestInterval);
      toMapResult.put("interval", interval);
      toMapResult.put("maxWaitTime", maxWaitTime);
      toMapResult.put("numUpdates", numUpdates);
      toMapResult.put("accuracy", accuracy == null ? null : accuracy.index);
      toMapResult.put("smallestDisplacement", smallestDisplacement);
      toMapResult.put("waitForAccurateLocation", waitForAccurateLocation);
      toMapResult.put("acceptableAccuracy", acceptableAccuracy);
      return toMapResult;
    }
    static @NonNull LocationSettings fromMap(@NonNull Map<String, Object> map) {
      LocationSettings pigeonResult = new LocationSettings();
      Object askForPermission = map.get("askForPermission");
      pigeonResult.setAskForPermission((Boolean)askForPermission);
      Object rationaleMessageForPermissionRequest = map.get("rationaleMessageForPermissionRequest");
      pigeonResult.setRationaleMessageForPermissionRequest((String)rationaleMessageForPermissionRequest);
      Object rationaleMessageForGPSRequest = map.get("rationaleMessageForGPSRequest");
      pigeonResult.setRationaleMessageForGPSRequest((String)rationaleMessageForGPSRequest);
      Object useGooglePlayServices = map.get("useGooglePlayServices");
      pigeonResult.setUseGooglePlayServices((Boolean)useGooglePlayServices);
      Object askForGooglePlayServices = map.get("askForGooglePlayServices");
      pigeonResult.setAskForGooglePlayServices((Boolean)askForGooglePlayServices);
      Object askForGPS = map.get("askForGPS");
      pigeonResult.setAskForGPS((Boolean)askForGPS);
      Object fallbackToGPS = map.get("fallbackToGPS");
      pigeonResult.setFallbackToGPS((Boolean)fallbackToGPS);
      Object ignoreLastKnownPosition = map.get("ignoreLastKnownPosition");
      pigeonResult.setIgnoreLastKnownPosition((Boolean)ignoreLastKnownPosition);
      Object expirationDuration = map.get("expirationDuration");
      pigeonResult.setExpirationDuration((Double)expirationDuration);
      Object expirationTime = map.get("expirationTime");
      pigeonResult.setExpirationTime((Double)expirationTime);
      Object fastestInterval = map.get("fastestInterval");
      pigeonResult.setFastestInterval((Double)fastestInterval);
      Object interval = map.get("interval");
      pigeonResult.setInterval((Double)interval);
      Object maxWaitTime = map.get("maxWaitTime");
      pigeonResult.setMaxWaitTime((Double)maxWaitTime);
      Object numUpdates = map.get("numUpdates");
      pigeonResult.setNumUpdates((numUpdates == null) ? null : ((numUpdates instanceof Integer) ? (Integer)numUpdates : (Long)numUpdates));
      Object accuracy = map.get("accuracy");
      pigeonResult.setAccuracy(accuracy == null ? null : LocationAccuracy.values()[(int)accuracy]);
      Object smallestDisplacement = map.get("smallestDisplacement");
      pigeonResult.setSmallestDisplacement((Double)smallestDisplacement);
      Object waitForAccurateLocation = map.get("waitForAccurateLocation");
      pigeonResult.setWaitForAccurateLocation((Boolean)waitForAccurateLocation);
      Object acceptableAccuracy = map.get("acceptableAccuracy");
      pigeonResult.setAcceptableAccuracy((Double)acceptableAccuracy);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class LocationHostApiCodec extends StandardMessageCodec {
    public static final LocationHostApiCodec INSTANCE = new LocationHostApiCodec();
    private LocationHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return LocationData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return LocationSettings.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return LocationSettings.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof LocationData) {
        stream.write(128);
        writeValue(stream, ((LocationData) value).toMap());
      } else 
      if (value instanceof LocationSettings) {
        stream.write(129);
        writeValue(stream, ((LocationSettings) value).toMap());
      } else 
      if (value instanceof LocationSettings) {
        stream.write(130);
        writeValue(stream, ((LocationSettings) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface LocationHostApi {
    void getLocation(@Nullable LocationSettings settings, Result<LocationData> result);
    @NonNull Boolean setLocationSettings(@NonNull LocationSettings settings);

    /** The codec used by LocationHostApi. */
    static MessageCodec<Object> getCodec() {
      return LocationHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `LocationHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, LocationHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.LocationHostApi.getLocation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              LocationSettings settingsArg = (LocationSettings)args.get(0);
              Result<LocationData> resultCallback = new Result<LocationData>() {
                public void success(LocationData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getLocation(settingsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.LocationHostApi.setLocationSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              LocationSettings settingsArg = (LocationSettings)args.get(0);
              if (settingsArg == null) {
                throw new NullPointerException("settingsArg unexpectedly null.");
              }
              Boolean output = api.setLocationSettings(settingsArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
